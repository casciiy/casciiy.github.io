<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>libelf库的使用</title>
    <link href="/2022/11/05/libelf%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/11/05/libelf%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><code>ELF</code>文件是<code>Linux</code>系统下的一类重要文件，可执行文件、共享库文件、目标文件等都是ELF格式的文件，本文主要介绍如何使用<code>libelf</code>库对elf文件进行解析。   </p><span id="more"></span><div class="note note-success">            <p>test_txt</p>          </div>     <div class="note note-primary">            <p>和</p>          </div><p>​                                                                                                                                              </p><h2 id="下载与编译安装"><a href="#下载与编译安装" class="headerlink" title="下载与编译安装"></a>下载与编译安装</h2><p>从git仓库下载最新版本的libelf库源码，进行编译与安装。</p><h3 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost elf]<span class="hljs-comment"># git clone  https://github.com/WolfgangSt/libelf.git</span><br>Cloning into <span class="hljs-string">&#x27;libelf&#x27;</span>...<br>remote: Enumerating objects: 129, <span class="hljs-keyword">done</span>.<br>remote: Total 129 (delta 0), reused 0 (delta 0), pack-reused 129<br>Receiving objects: 100% (129/129), 181.27 KiB | 697.00 KiB/s, <span class="hljs-keyword">done</span>.<br>Resolving deltas: 100% (44/44), <span class="hljs-keyword">done</span>.<br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost libelf]<span class="hljs-comment"># cd libelf/</span><br>[root@localhost libelf]<span class="hljs-comment"># ./configure    //这里可以使用--prefix=&lt;想要安装到的路径&gt;，这里我就直接使用默认路径</span><br></code></pre></td></tr></table></figure><h3 id="编译与安装"><a href="#编译与安装" class="headerlink" title="编译与安装"></a>编译与安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost libelf]<span class="hljs-comment"># make &amp;&amp; make install</span><br></code></pre></td></tr></table></figure><h3 id="检验库是否正确安装"><a href="#检验库是否正确安装" class="headerlink" title="检验库是否正确安装"></a>检验库是否正确安装</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;libelf.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;elf version:%d\n&quot;</span>, elf_version(EV_CURRENT));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>[root@localhost elf]<span class="hljs-meta"># gcc elf.c -o elf -lelf</span><br></code></pre></td></tr></table></figure><p>结果打印非<code>EV_NONE</code>(0)则表示库已经正确安装。</p><h2 id="解析elf文件"><a href="#解析elf文件" class="headerlink" title="解析elf文件"></a>解析elf文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;libelf.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;gelf.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get_sec</span><span class="hljs-params">(Elf *elf, <span class="hljs-type">int</span> i, GElf_Ehdr *ehdr, <span class="hljs-type">char</span> **shname,GElf_Shdr *shdr, Elf_Data **data)</span><br>&#123;<br>    Elf_Scn *scn;<br>    scn = elf_getscn(elf, i);  <span class="hljs-comment">//从elf描述符获取按照节索引获取节接口</span><br><span class="hljs-keyword">if</span> (!scn)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (gelf_getshdr(scn, shdr) != shdr) <span class="hljs-comment">// 通过节结构复制节表头</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    *shname = elf_strptr(elf, ehdr-&gt;e_shstrndx, shdr-&gt;sh_name); <span class="hljs-comment">// 从指定的字符串表中通过偏移获取字符串</span><br>    <span class="hljs-keyword">if</span> (!*shname || !shdr-&gt;sh_size)<br><span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    *data = elf_getdata(scn, <span class="hljs-number">0</span>);  <span class="hljs-comment">//从节中获取节数据（经过了字节序的转换）</span><br>    <span class="hljs-keyword">if</span> (!*data || elf_getdata(scn, *data) != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">parse_file</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path)</span><br>&#123;<br>    Elf *elf = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> fd = <span class="hljs-number">0</span>;<br>    GElf_Ehdr ehdr = &#123;<span class="hljs-number">0</span>&#125;;<br>    GElf_Shdr shdr = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">char</span> *shname = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> *shname_prog = <span class="hljs-literal">NULL</span>;<br>    Elf_Data *data = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (elf_version(EV_CURRENT) == EV_NONE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;get elf version error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    fd = open(path, O_RDONLY, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (fd &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open %s file error.\n&quot;</span>, path);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    elf = elf_begin(fd, ELF_C_READ, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//获取elf描述符,使用‘读取’的方式</span><br>    <span class="hljs-keyword">if</span> (!elf)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;can not get elf desc\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (gelf_getehdr(elf, &amp;ehdr) != &amp;ehdr) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;get ehdr failed.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; ehdr.e_shnum; i++) &#123;<br>        <span class="hljs-keyword">if</span> (get_sec(elf, i, &amp;ehdr, &amp;shname, &amp;shdr, &amp;data))<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;section %-4d:%-20s data %p size %-4zd link %-4d flags %-4d type %d\n&quot;</span>, i, shname, \<br>            data-&gt;d_buf, data-&gt;d_size,shdr.sh_link, (<span class="hljs-type">int</span>) shdr.sh_flags,(<span class="hljs-type">int</span>) shdr.sh_type);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(shname, <span class="hljs-string">&quot;.text&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;.text data:&quot;</span>);<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *p=data-&gt;d_buf;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;data-&gt;d_size;j++) &#123;<br>                <span class="hljs-keyword">if</span>(j%<span class="hljs-number">8</span>==<span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                &#125;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4x&quot;</span>,*p++);<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    parse_file(<span class="hljs-string">&quot;./test.o&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ELF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/05/hello-world/"/>
    <url>/2022/11/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
